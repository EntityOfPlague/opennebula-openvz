#!/usr/bin/env ruby

ONE_LOCATION=ENV["ONE_LOCATION"] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby" if !defined?(RUBY_LIB_LOCATION)
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby" if !defined?(RUBY_LIB_LOCATION)
end

$: << RUBY_LIB_LOCATION
$: << File.dirname(__FILE__) + '/../..'

require 'scripts_common'
require 'rubygems'
require "#{File.dirname(__FILE__)}/ovz_common"

ENV['LANG']='C'

vm_id = ARGV[0]

read_shell_exports(File.join(File.dirname($0), "ovzrc"))

#$vz_conf = read_ovz_config(ENV["VZ_CONF"])
$sudo    = ENV["SUDO"]
$vzctl   = ENV["VZCTL"]
$vzlist  = ENV["VZLIST"]

#OpenNebula.log_info("<-----------------------We are in Shutdown-------------------------->")
OpenNebula.exec_and_log("#{$sudo} #{$vzctl} stop #{vm_id}")

vm_conf_filename = File.join(ENV["VZ_CONF_DIR"], "#{vm_id}.conf")
vm_conf = read_ovz_config(vm_conf_filename)

vm_tarball = File.join(File.dirname(vm_conf["VE_PRIVATE"]), "disk.0")


compress = guess_tarball_type(vm_tarball)

OpenNebula.exec_and_log("#{$sudo} #{$vzctl} mount #{vm_id}")

# Assume /proc, /sys and other special file systems are unmounted.
OpenNebula.exec_and_log("#{$sudo} tar -cf \"#{vm_tarball}\" " +
                        "--#{compress.to_s} -Sp " +
                        "-C \"#{vm_conf["VE_ROOT"]}\" . --ignore-failed-read")

OpenNebula.exec_and_log("#{$sudo} #{$vzctl} umount #{vm_id}")

if !File.symlink?("#{vm_tarball}")
    OpenNebula.exec_and_log("#{$sudo} chown $(id -u):$(id -g) \"#{vm_tarball}\"")
end

OpenNebula.exec_and_log("#{$sudo} #{$vzctl} destroy #{vm_id}")

vm_conf_filename = vm_conf_filename + ".destroyed"
if File.exists?(vm_conf_filename)
    OpenNebula.exec_and_log("#{$sudo} rm -f \"#{vm_conf_filename}\"")
end

